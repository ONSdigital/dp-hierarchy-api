// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package datastoretest

import (
	"context"
	"github.com/ONSdigital/dp-graph/v2/models"
	"github.com/ONSdigital/dp-hierarchy-api/datastore"
	"sync"
)

var (
	lockStorerMockClose                sync.RWMutex
	lockStorerMockGetHierarchyCodelist sync.RWMutex
	lockStorerMockGetHierarchyElement  sync.RWMutex
	lockStorerMockGetHierarchyRoot     sync.RWMutex
)

// Ensure, that StorerMock does implement Storer.
// If this is not the case, regenerate this file with moq.
var _ datastore.Storer = &StorerMock{}

// StorerMock is a mock implementation of datastore.Storer.
//
//     func TestSomethingThatUsesStorer(t *testing.T) {
//
//         // make and configure a mocked datastore.Storer
//         mockedStorer := &StorerMock{
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             GetHierarchyCodelistFunc: func(ctx context.Context, instanceID string, dimension string) (string, error) {
// 	               panic("mock out the GetHierarchyCodelist method")
//             },
//             GetHierarchyElementFunc: func(ctx context.Context, instanceID string, dimension string, code string) (*models.HierarchyResponse, error) {
// 	               panic("mock out the GetHierarchyElement method")
//             },
//             GetHierarchyRootFunc: func(ctx context.Context, instanceID string, dimension string) (*models.HierarchyResponse, error) {
// 	               panic("mock out the GetHierarchyRoot method")
//             },
//         }
//
//         // use mockedStorer in code that requires datastore.Storer
//         // and then make assertions.
//
//     }
type StorerMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// GetHierarchyCodelistFunc mocks the GetHierarchyCodelist method.
	GetHierarchyCodelistFunc func(ctx context.Context, instanceID string, dimension string) (string, error)

	// GetHierarchyElementFunc mocks the GetHierarchyElement method.
	GetHierarchyElementFunc func(ctx context.Context, instanceID string, dimension string, code string) (*models.HierarchyResponse, error)

	// GetHierarchyRootFunc mocks the GetHierarchyRoot method.
	GetHierarchyRootFunc func(ctx context.Context, instanceID string, dimension string) (*models.HierarchyResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetHierarchyCodelist holds details about calls to the GetHierarchyCodelist method.
		GetHierarchyCodelist []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Dimension is the dimension argument value.
			Dimension string
		}
		// GetHierarchyElement holds details about calls to the GetHierarchyElement method.
		GetHierarchyElement []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Dimension is the dimension argument value.
			Dimension string
			// Code is the code argument value.
			Code string
		}
		// GetHierarchyRoot holds details about calls to the GetHierarchyRoot method.
		GetHierarchyRoot []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// Dimension is the dimension argument value.
			Dimension string
		}
	}
}

// Close calls CloseFunc.
func (mock *StorerMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("StorerMock.CloseFunc: method is nil but Storer.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockStorerMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockStorerMockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedStorer.CloseCalls())
func (mock *StorerMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockStorerMockClose.RLock()
	calls = mock.calls.Close
	lockStorerMockClose.RUnlock()
	return calls
}

// GetHierarchyCodelist calls GetHierarchyCodelistFunc.
func (mock *StorerMock) GetHierarchyCodelist(ctx context.Context, instanceID string, dimension string) (string, error) {
	if mock.GetHierarchyCodelistFunc == nil {
		panic("StorerMock.GetHierarchyCodelistFunc: method is nil but Storer.GetHierarchyCodelist was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		Dimension  string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		Dimension:  dimension,
	}
	lockStorerMockGetHierarchyCodelist.Lock()
	mock.calls.GetHierarchyCodelist = append(mock.calls.GetHierarchyCodelist, callInfo)
	lockStorerMockGetHierarchyCodelist.Unlock()
	return mock.GetHierarchyCodelistFunc(ctx, instanceID, dimension)
}

// GetHierarchyCodelistCalls gets all the calls that were made to GetHierarchyCodelist.
// Check the length with:
//     len(mockedStorer.GetHierarchyCodelistCalls())
func (mock *StorerMock) GetHierarchyCodelistCalls() []struct {
	Ctx        context.Context
	InstanceID string
	Dimension  string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		Dimension  string
	}
	lockStorerMockGetHierarchyCodelist.RLock()
	calls = mock.calls.GetHierarchyCodelist
	lockStorerMockGetHierarchyCodelist.RUnlock()
	return calls
}

// GetHierarchyElement calls GetHierarchyElementFunc.
func (mock *StorerMock) GetHierarchyElement(ctx context.Context, instanceID string, dimension string, code string) (*models.HierarchyResponse, error) {
	if mock.GetHierarchyElementFunc == nil {
		panic("StorerMock.GetHierarchyElementFunc: method is nil but Storer.GetHierarchyElement was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		Dimension  string
		Code       string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		Dimension:  dimension,
		Code:       code,
	}
	lockStorerMockGetHierarchyElement.Lock()
	mock.calls.GetHierarchyElement = append(mock.calls.GetHierarchyElement, callInfo)
	lockStorerMockGetHierarchyElement.Unlock()
	return mock.GetHierarchyElementFunc(ctx, instanceID, dimension, code)
}

// GetHierarchyElementCalls gets all the calls that were made to GetHierarchyElement.
// Check the length with:
//     len(mockedStorer.GetHierarchyElementCalls())
func (mock *StorerMock) GetHierarchyElementCalls() []struct {
	Ctx        context.Context
	InstanceID string
	Dimension  string
	Code       string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		Dimension  string
		Code       string
	}
	lockStorerMockGetHierarchyElement.RLock()
	calls = mock.calls.GetHierarchyElement
	lockStorerMockGetHierarchyElement.RUnlock()
	return calls
}

// GetHierarchyRoot calls GetHierarchyRootFunc.
func (mock *StorerMock) GetHierarchyRoot(ctx context.Context, instanceID string, dimension string) (*models.HierarchyResponse, error) {
	if mock.GetHierarchyRootFunc == nil {
		panic("StorerMock.GetHierarchyRootFunc: method is nil but Storer.GetHierarchyRoot was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		Dimension  string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		Dimension:  dimension,
	}
	lockStorerMockGetHierarchyRoot.Lock()
	mock.calls.GetHierarchyRoot = append(mock.calls.GetHierarchyRoot, callInfo)
	lockStorerMockGetHierarchyRoot.Unlock()
	return mock.GetHierarchyRootFunc(ctx, instanceID, dimension)
}

// GetHierarchyRootCalls gets all the calls that were made to GetHierarchyRoot.
// Check the length with:
//     len(mockedStorer.GetHierarchyRootCalls())
func (mock *StorerMock) GetHierarchyRootCalls() []struct {
	Ctx        context.Context
	InstanceID string
	Dimension  string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		Dimension  string
	}
	lockStorerMockGetHierarchyRoot.RLock()
	calls = mock.calls.GetHierarchyRoot
	lockStorerMockGetHierarchyRoot.RUnlock()
	return calls
}
